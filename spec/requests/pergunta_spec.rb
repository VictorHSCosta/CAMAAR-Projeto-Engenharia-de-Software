# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/pergunta', type: :request do
  let(:user) do
    User.create!(name: 'Test User', email: 'test@example.com', password: 'password', matricula: '12345', role: 'admin')
  end
  let(:template) { Template.create!(titulo: 'Test Template', publico_alvo: 1, criado_por: user) }

  before do
    login_as(user, scope: :user)
  end

  # This should return the minimal set of attributes required to create a valid
  # Perguntum. As you add validations to Perguntum, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    {
      template_id: template.id,
      titulo: 'Test Question',
      tipo: 1,
      ordem: 1
    }
  end

  let(:invalid_attributes) do
    {
      template_id: nil,
      titulo: nil,
      tipo: nil,
      ordem: nil
    }
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      Perguntum.create! valid_attributes
      get pergunta_url
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      perguntum = Perguntum.create! valid_attributes
      get perguntum_url(perguntum)
      expect(response).to be_successful
    end
  end

  describe 'GET /new' do
    it 'renders a successful response' do
      get new_perguntum_url
      expect(response).to be_successful
    end
  end

  describe 'GET /edit' do
    it 'renders a successful response' do
      perguntum = Perguntum.create! valid_attributes
      get edit_perguntum_url(perguntum)
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new Perguntum' do
        expect do
          post pergunta_url, params: { perguntum: valid_attributes }
        end.to change(Perguntum, :count).by(1)
      end

      it 'redirects to the created perguntum' do
        post pergunta_url, params: { perguntum: valid_attributes }
        expect(response).to redirect_to(perguntum_url(Perguntum.last))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Perguntum' do
        expect do
          post pergunta_url, params: { perguntum: invalid_attributes }
        end.not_to change(Perguntum, :count)
      end

      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post pergunta_url, params: { perguntum: invalid_attributes }
        expect(response).to have_http_status(422)
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        {
          titulo: 'Updated Question',
          tipo: 2,
          ordem: 2
        }
      end

      it 'updates the requested perguntum' do
        perguntum = Perguntum.create! valid_attributes
        patch perguntum_url(perguntum), params: { perguntum: new_attributes }
        perguntum.reload
        expect(perguntum.titulo).to eq('Updated Question')
      end

      it 'redirects to the perguntum' do
        perguntum = Perguntum.create! valid_attributes
        patch perguntum_url(perguntum), params: { perguntum: new_attributes }
        perguntum.reload
        expect(response).to redirect_to(perguntum_url(perguntum))
      end
    end

    context 'with invalid parameters' do
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        perguntum = Perguntum.create! valid_attributes
        patch perguntum_url(perguntum), params: { perguntum: invalid_attributes }
        expect(response).to have_http_status(422)
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested perguntum' do
      perguntum = Perguntum.create! valid_attributes
      expect do
        delete perguntum_url(perguntum)
      end.to change(Perguntum, :count).by(-1)
    end

    it 'redirects to the pergunta list' do
      perguntum = Perguntum.create! valid_attributes
      delete perguntum_url(perguntum)
      expect(response).to redirect_to(pergunta_url)
    end
  end
end
