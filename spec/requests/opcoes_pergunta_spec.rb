# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/opcoes_pergunta', type: :request do
  let(:user) do
    User.create!(name: 'Test User', email: 'test@example.com', password: 'password', matricula: '12345', role: 'admin')
  end
  # This should return the minimal set of attributes required to create a valid
  # OpcoesPerguntum. As you add validations to OpcoesPerguntum, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    {
      pergunta_id: pergunta.id,
      texto: 'Test Option'
    }
  end
  let(:invalid_attributes) do
    {
      pergunta_id: nil,
      texto: nil
    }
  end
  let(:template) { Template.create!(titulo: 'Test Template', publico_alvo: 1, criado_por: user) }
  let(:pergunta) { Perguntum.create!(template: template, titulo: 'Test Question', tipo: 1, ordem: 1) }

  before do
    login_as(user, scope: :user)
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      OpcoesPerguntum.create! valid_attributes
      get opcoes_pergunta_url
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      opcoes_perguntum = OpcoesPerguntum.create! valid_attributes
      get opcoes_perguntum_url(opcoes_perguntum)
      expect(response).to be_successful
    end
  end

  describe 'GET /new' do
    it 'renders a successful response' do
      get new_opcoes_perguntum_url
      expect(response).to be_successful
    end
  end

  describe 'GET /edit' do
    it 'renders a successful response' do
      opcoes_perguntum = OpcoesPerguntum.create! valid_attributes
      get edit_opcoes_perguntum_url(opcoes_perguntum)
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new OpcoesPerguntum' do
        expect do
          post opcoes_pergunta_url, params: { opcoes_perguntum: valid_attributes }
        end.to change(OpcoesPerguntum, :count).by(1)
      end

      it 'redirects to the created opcoes_perguntum' do
        post opcoes_pergunta_url, params: { opcoes_perguntum: valid_attributes }
        expect(response).to redirect_to(opcoes_perguntum_url(OpcoesPerguntum.last))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new OpcoesPerguntum' do
        expect do
          post opcoes_pergunta_url, params: { opcoes_perguntum: invalid_attributes }
        end.not_to change(OpcoesPerguntum, :count)
      end

      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post opcoes_pergunta_url, params: { opcoes_perguntum: invalid_attributes }
        expect(response).to have_http_status(422)
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        {
          texto: 'Updated Option'
        }
      end

      it 'updates the requested opcoes_perguntum' do
        opcoes_perguntum = OpcoesPerguntum.create! valid_attributes
        patch opcoes_perguntum_url(opcoes_perguntum), params: { opcoes_perguntum: new_attributes }
        opcoes_perguntum.reload
        expect(opcoes_perguntum.texto).to eq('Updated Option')
      end

      it 'redirects to the opcoes_perguntum' do
        opcoes_perguntum = OpcoesPerguntum.create! valid_attributes
        patch opcoes_perguntum_url(opcoes_perguntum), params: { opcoes_perguntum: new_attributes }
        opcoes_perguntum.reload
        expect(response).to redirect_to(opcoes_perguntum_url(opcoes_perguntum))
      end
    end

    context 'with invalid parameters' do
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        opcoes_perguntum = OpcoesPerguntum.create! valid_attributes
        patch opcoes_perguntum_url(opcoes_perguntum), params: { opcoes_perguntum: invalid_attributes }
        expect(response).to have_http_status(422)
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested opcoes_perguntum' do
      opcoes_perguntum = OpcoesPerguntum.create! valid_attributes
      expect do
        delete opcoes_perguntum_url(opcoes_perguntum)
      end.to change(OpcoesPerguntum, :count).by(-1)
    end

    it 'redirects to the opcoes_pergunta list' do
      opcoes_perguntum = OpcoesPerguntum.create! valid_attributes
      delete opcoes_perguntum_url(opcoes_perguntum)
      expect(response).to redirect_to(opcoes_pergunta_url)
    end
  end
end
