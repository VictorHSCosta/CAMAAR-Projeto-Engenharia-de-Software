# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/disciplinas', type: :request do
  let(:user) { FactoryBot.create(:user) }
  let(:curso) { FactoryBot.create(:curso) }

  # This should return the minimal set of attributes required to create a valid
  # Disciplina. As you add validations to Disciplina, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    {
      nome: 'Engenharia de Software',
      curso_id: curso.id
    }
  end

  let(:invalid_attributes) do
    {
      nome: '',
      curso_id: nil
    }
  end

  before do
    # Simula usu√°rio logado para testes de request
    login_as(user, scope: :user)
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      Disciplina.create! valid_attributes
      get disciplinas_url
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      disciplina = Disciplina.create! valid_attributes
      get disciplina_url(disciplina)
      expect(response).to be_successful
    end
  end

  describe 'GET /new' do
    it 'renders a successful response' do
      get new_disciplina_url
      expect(response).to be_successful
    end
  end

  describe 'GET /edit' do
    it 'renders a successful response' do
      disciplina = Disciplina.create! valid_attributes
      get edit_disciplina_url(disciplina)
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new Disciplina' do
        expect do
          post disciplinas_url, params: { disciplina: valid_attributes }
        end.to change(Disciplina, :count).by(1)
      end

      it 'redirects to the created disciplina' do
        post disciplinas_url, params: { disciplina: valid_attributes }
        expect(response).to redirect_to(disciplina_url(Disciplina.last))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Disciplina' do
        expect do
          post disciplinas_url, params: { disciplina: invalid_attributes }
        end.not_to change(Disciplina, :count)
      end

      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post disciplinas_url, params: { disciplina: invalid_attributes }
        expect(response).to have_http_status(422)
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        skip('Add a hash of attributes valid for your model')
      end

      it 'updates the requested disciplina' do
        disciplina = Disciplina.create! valid_attributes
        patch disciplina_url(disciplina), params: { disciplina: new_attributes }
        disciplina.reload
        skip('Add assertions for updated state')
      end

      it 'redirects to the disciplina' do
        disciplina = Disciplina.create! valid_attributes
        patch disciplina_url(disciplina), params: { disciplina: new_attributes }
        disciplina.reload
        expect(response).to redirect_to(disciplina_url(disciplina))
      end
    end

    context 'with invalid parameters' do
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        disciplina = Disciplina.create! valid_attributes
        patch disciplina_url(disciplina), params: { disciplina: invalid_attributes }
        expect(response).to have_http_status(422)
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested disciplina' do
      disciplina = Disciplina.create! valid_attributes
      expect do
        delete disciplina_url(disciplina)
      end.to change(Disciplina, :count).by(-1)
    end

    it 'redirects to the disciplinas list' do
      disciplina = Disciplina.create! valid_attributes
      delete disciplina_url(disciplina)
      expect(response).to redirect_to(disciplinas_url)
    end
  end
end
