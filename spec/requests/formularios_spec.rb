# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/formularios', type: :request do
  let(:user) do
    User.create!(name: 'Test User', email: 'test@example.com', password: 'password', matricula: '12345', role: 'admin')
  end
  let(:invalid_attributes) do
    {
      template_id: nil,
      turma_id: nil,
      coordenador_id: nil
    }
  end
  # This should return the minimal set of attributes required to create a valid
  # Formulario. As you add validations to Formulario, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    {
      template_id: template.id,
      turma_id: turma.id,
      coordenador_id: user.id,
      data_envio: Time.current,
      data_fim: 1.week.from_now
    }
  end
  let(:curso) { Curso.create!(nome: 'Test Course') }
  let(:disciplina) { Disciplina.create!(nome: 'Test Discipline', curso: curso) }
  let(:professor) do
    User.create!(name: 'Professor', email: 'professor@example.com', password: 'password', matricula: '67890',
                 role: 'professor')
  end
  let(:turma) { Turma.create!(disciplina: disciplina, professor: professor, semestre: '2024.1') }
  let(:template) { Template.create!(titulo: 'Test Template', publico_alvo: 1, criado_por: user) }

  before do
    login_as(user, scope: :user)
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      Formulario.create! valid_attributes
      get formularios_url
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      formulario = Formulario.create! valid_attributes
      get formulario_url(formulario)
      expect(response).to be_successful
    end
  end

  describe 'GET /new' do
    it 'renders a successful response' do
      get new_formulario_url
      expect(response).to be_successful
    end
  end

  describe 'GET /edit' do
    it 'renders a successful response' do
      formulario = Formulario.create! valid_attributes
      get edit_formulario_url(formulario)
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new Formulario' do
        expect do
          post formularios_url, params: { formulario: valid_attributes }
        end.to change(Formulario, :count).by(1)
      end

      it 'redirects to the created formulario' do
        post formularios_url, params: { formulario: valid_attributes }
        expect(response).to redirect_to(formulario_url(Formulario.last))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Formulario' do
        expect do
          post formularios_url, params: { formulario: invalid_attributes }
        end.not_to change(Formulario, :count)
      end

      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post formularios_url, params: { formulario: invalid_attributes }
        expect(response).to have_http_status(422)
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        {
          data_envio: 1.day.from_now,
          data_fim: 2.weeks.from_now
        }
      end

      it 'updates the requested formulario' do
        formulario = Formulario.create! valid_attributes
        patch formulario_url(formulario), params: { formulario: new_attributes }
        formulario.reload
        expect(formulario.data_envio).to be_within(1.second).of(new_attributes[:data_envio])
      end

      it 'redirects to the formulario' do
        formulario = Formulario.create! valid_attributes
        patch formulario_url(formulario), params: { formulario: new_attributes }
        formulario.reload
        expect(response).to redirect_to(formulario_url(formulario))
      end
    end

    context 'with invalid parameters' do
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        formulario = Formulario.create! valid_attributes
        patch formulario_url(formulario), params: { formulario: invalid_attributes }
        expect(response).to have_http_status(422)
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested formulario' do
      formulario = Formulario.create! valid_attributes
      expect do
        delete formulario_url(formulario)
      end.to change(Formulario, :count).by(-1)
    end

    it 'redirects to the formularios list' do
      formulario = Formulario.create! valid_attributes
      delete formulario_url(formulario)
      expect(response).to redirect_to(formularios_url)
    end
  end
end
