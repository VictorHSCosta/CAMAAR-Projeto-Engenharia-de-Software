# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/resposta', type: :request do
  let(:user) do
    User.create!(name: 'Test User', email: 'test@example.com', password: 'password', matricula: '12345', role: 'admin')
  end
  # This should return the minimal set of attributes required to create a valid
  # Respostum. As you add validations to Respostum, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    {
      formulario_id: formulario.id,
      pergunta_id: pergunta.id,
      opcao_id: opcao.id,
      resposta_texto: 'Test Response',
      turma_id: turma.id,
      uuid_anonimo: SecureRandom.uuid
    }
  end
  let(:invalid_attributes) do
    {
      formulario_id: nil,
      pergunta_id: nil,
      opcao_id: nil,
      turma_id: nil
    }
  end
  let(:curso) { Curso.create!(nome: 'Test Course') }
  let(:disciplina) { Disciplina.create!(nome: 'Test Discipline', curso: curso) }
  let(:professor) do
    User.create!(name: 'Professor', email: 'professor@example.com', password: 'password', matricula: '67890',
                 role: 'professor')
  end
  let(:turma) { Turma.create!(disciplina: disciplina, professor: professor, semestre: '2024.1') }
  let(:template) { Template.create!(titulo: 'Test Template', publico_alvo: 1, criado_por: user) }
  let(:formulario) { Formulario.create!(template: template, turma: turma, coordenador: user) }
  let(:pergunta) { Perguntum.create!(template: template, titulo: 'Test Question', tipo: 1, ordem: 1) }
  let(:opcao) { OpcoesPerguntum.create!(pergunta: pergunta, texto: 'Test Option') }

  before do
    login_as(user, scope: :user)
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      Respostum.create! valid_attributes
      get resposta_url
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      respostum = Respostum.create! valid_attributes
      get respostum_url(respostum)
      expect(response).to be_successful
    end
  end

  describe 'GET /new' do
    it 'renders a successful response' do
      get new_respostum_url
      expect(response).to be_successful
    end
  end

  describe 'GET /edit' do
    it 'renders a successful response' do
      respostum = Respostum.create! valid_attributes
      get edit_respostum_url(respostum)
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new Respostum' do
        expect do
          post resposta_url, params: { respostum: valid_attributes }
        end.to change(Respostum, :count).by(1)
      end

      it 'redirects to the created respostum' do
        post resposta_url, params: { respostum: valid_attributes }
        expect(response).to redirect_to(respostum_url(Respostum.last))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Respostum' do
        expect do
          post resposta_url, params: { respostum: invalid_attributes }
        end.not_to change(Respostum, :count)
      end

      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post resposta_url, params: { respostum: invalid_attributes }
        expect(response).to have_http_status(422)
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        {
          resposta_texto: 'Updated Response'
        }
      end

      it 'updates the requested respostum' do
        respostum = Respostum.create! valid_attributes
        patch respostum_url(respostum), params: { respostum: new_attributes }
        respostum.reload
        expect(respostum.resposta_texto).to eq('Updated Response')
      end

      it 'redirects to the respostum' do
        respostum = Respostum.create! valid_attributes
        patch respostum_url(respostum), params: { respostum: new_attributes }
        respostum.reload
        expect(response).to redirect_to(respostum_url(respostum))
      end
    end

    context 'with invalid parameters' do
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        respostum = Respostum.create! valid_attributes
        patch respostum_url(respostum), params: { respostum: invalid_attributes }
        expect(response).to have_http_status(422)
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested respostum' do
      respostum = Respostum.create! valid_attributes
      expect do
        delete respostum_url(respostum)
      end.to change(Respostum, :count).by(-1)
    end

    it 'redirects to the resposta list' do
      respostum = Respostum.create! valid_attributes
      delete respostum_url(respostum)
      expect(response).to redirect_to(resposta_url)
    end
  end
end
