# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/turmas', type: :request do
  let(:user) do
    User.create!(name: 'Test User', email: 'test@example.com', password: 'password', matricula: '12345', role: 'admin')
  end
  # This should return the minimal set of attributes required to create a valid
  # Turma. As you add validations to Turma, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    {
      disciplina_id: disciplina.id,
      professor_id: professor.id,
      semestre: '2024.1'
    }
  end
  let(:invalid_attributes) do
    {
      disciplina_id: nil,
      professor_id: nil,
      semestre: nil
    }
  end
  let(:curso) { Curso.create!(nome: 'Test Course') }
  let(:disciplina) { Disciplina.create!(nome: 'Test Discipline', curso: curso) }
  let(:professor) do
    User.create!(name: 'Professor', email: 'professor@example.com', password: 'password', matricula: '67890',
                 role: 'professor')
  end

  before do
    login_as(user, scope: :user)
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      Turma.create! valid_attributes
      get turmas_url
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      turma = Turma.create! valid_attributes
      get turma_url(turma)
      expect(response).to be_successful
    end
  end

  describe 'GET /new' do
    it 'renders a successful response' do
      get new_turma_url
      expect(response).to be_successful
    end
  end

  describe 'GET /edit' do
    it 'renders a successful response' do
      turma = Turma.create! valid_attributes
      get edit_turma_url(turma)
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new Turma' do
        expect do
          post turmas_url, params: { turma: valid_attributes }
        end.to change(Turma, :count).by(1)
      end

      it 'redirects to the created turma' do
        post turmas_url, params: { turma: valid_attributes }
        expect(response).to redirect_to(turma_url(Turma.last))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Turma' do
        expect do
          post turmas_url, params: { turma: invalid_attributes }
        end.not_to change(Turma, :count)
      end

      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post turmas_url, params: { turma: invalid_attributes }
        expect(response).to have_http_status(422)
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        {
          semestre: '2024.2'
        }
      end

      it 'updates the requested turma' do
        turma = Turma.create! valid_attributes
        patch turma_url(turma), params: { turma: new_attributes }
        turma.reload
        expect(turma.semestre).to eq('2024.2')
      end

      it 'redirects to the turma' do
        turma = Turma.create! valid_attributes
        patch turma_url(turma), params: { turma: new_attributes }
        turma.reload
        expect(response).to redirect_to(turma_url(turma))
      end
    end

    context 'with invalid parameters' do
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        turma = Turma.create! valid_attributes
        patch turma_url(turma), params: { turma: invalid_attributes }
        expect(response).to have_http_status(422)
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested turma' do
      turma = Turma.create! valid_attributes
      expect do
        delete turma_url(turma)
      end.to change(Turma, :count).by(-1)
    end

    it 'redirects to the turmas list' do
      turma = Turma.create! valid_attributes
      delete turma_url(turma)
      expect(response).to redirect_to(turmas_url)
    end
  end
end
